#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –±–µ–∑ Flask
"""
import sys
sys.path.insert(0, '/home/user/Automatition')

from ai_assistant.app.classifier import get_classifier

print("=" * 60)
print("AI Assistant - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
print("=" * 60)
print()

# –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
classifier = get_classifier()

# –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã
test_cases = [
    {
        "id": "TEST-001",
        "subject": "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç Outlook",
        "description": "–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ Outlook –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è"
    },
    {
        "id": "TEST-002",
        "subject": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
        "description": "–ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, –∫–∞–±–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω"
    },
    {
        "id": "TEST-003",
        "subject": "–û—à–∏–±–∫–∞ –≤ 1–°",
        "description": "–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ 1–° –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    },
    {
        "id": "TEST-004",
        "subject": "–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç",
        "description": "–ü—Ä–∏–Ω—Ç–µ—Ä HP –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –ø–µ—á–∞—Ç–∏"
    },
    {
        "id": "TEST-005",
        "subject": "–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å",
        "description": "–ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –∑–∞–±—ã–ª –ø–∞—Ä–æ–ª—å"
    },
    {
        "id": "TEST-006",
        "subject": "–ö–†–ò–¢–ò–ß–ù–û! –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        "description": "–í—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å"
    }
]

print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:\n")

for test in test_cases:
    print(f"{'=' * 60}")
    print(f"ID: {test['id']}")
    print(f"–¢–µ–º–∞: {test['subject']}")
    print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {test['description']}")
    print()

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    result = classifier.classify(test['subject'], test['description'])

    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    action = classifier.get_suggested_action(result['confidence'])

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è:      {result['category']}")
    print(f"  –ì—Ä—É–ø–ø–∞:         {result['support_group']}")
    print(f"  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:      {result['priority']}")
    print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:    {result['confidence']:.2%}")
    print(f"  –ú–µ—Ç–æ–¥:          {result['method']}")
    print(f"  –î–µ–π—Å—Ç–≤–∏–µ:       {action}")

    if action == "auto_apply":
        print(f"  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ (confidence >= 80%)")
    elif action == "suggest":
        print(f"  üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É (50% <= confidence < 80%)")
    else:
        print(f"  ‚ö†Ô∏è  –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (confidence < 50%)")

    print()

print("=" * 60)
print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
print("=" * 60)
