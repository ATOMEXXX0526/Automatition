#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
"""

import sys
import traceback

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("=" * 60)
    print("–¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π")
    print("=" * 60)

    tests = []

    # –¢–µ—Å—Ç 1: naumen_sdk
    try:
        from naumen_sdk import NaumenClient
        print("‚úì naumen_sdk.NaumenClient –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        tests.append(("NaumenClient import", True))
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ naumen_sdk.NaumenClient: {e}")
        tests.append(("NaumenClient import", False))

    # –¢–µ—Å—Ç 2: IncidentHandler
    try:
        from automation.auto_incident_handler import IncidentHandler
        print("‚úì automation.auto_incident_handler.IncidentHandler –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        tests.append(("IncidentHandler import", True))
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ IncidentHandler: {e}")
        tests.append(("IncidentHandler import", False))

    # –¢–µ—Å—Ç 3: BulkOperations
    try:
        from automation.bulk_operations import BulkOperations
        print("‚úì automation.bulk_operations.BulkOperations –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        tests.append(("BulkOperations import", True))
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BulkOperations: {e}")
        tests.append(("BulkOperations import", False))

    # –¢–µ—Å—Ç 4: SLAMonitor
    try:
        from automation.sla_monitor import SLAMonitor
        print("‚úì automation.sla_monitor.SLAMonitor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        tests.append(("SLAMonitor import", True))
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ SLAMonitor: {e}")
        tests.append(("SLAMonitor import", False))

    return tests

def test_class_instantiation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤")
    print("=" * 60)

    tests = []

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è NaumenClient
    try:
        from naumen_sdk import NaumenClient
        client = NaumenClient("https://test.example.com", "test-api-key")
        print("‚úì NaumenClient —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        tests.append(("NaumenClient instantiation", True))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        assert hasattr(client, 'base_url'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç base_url"
        assert hasattr(client, 'access_key'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç access_key"
        assert client.base_url == "https://test.example.com", "–ù–µ–≤–µ—Ä–Ω—ã–π base_url"
        print("  - –ê—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")

    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NaumenClient: {e}")
        tests.append(("NaumenClient instantiation", False))
        traceback.print_exc()

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è IncidentHandler
    try:
        from naumen_sdk import NaumenClient
        from automation.auto_incident_handler import IncidentHandler
        client = NaumenClient("https://test.example.com", "test-api-key")
        handler = IncidentHandler(client)
        print("‚úì IncidentHandler —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        tests.append(("IncidentHandler instantiation", True))
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è IncidentHandler: {e}")
        tests.append(("IncidentHandler instantiation", False))
        traceback.print_exc()

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è BulkOperations
    try:
        from naumen_sdk import NaumenClient
        from automation.bulk_operations import BulkOperations
        client = NaumenClient("https://test.example.com", "test-api-key")
        bulk_ops = BulkOperations(client)
        print("‚úì BulkOperations —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        tests.append(("BulkOperations instantiation", True))
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BulkOperations: {e}")
        tests.append(("BulkOperations instantiation", False))
        traceback.print_exc()

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è SLAMonitor
    try:
        from naumen_sdk import NaumenClient
        from automation.sla_monitor import SLAMonitor
        client = NaumenClient("https://test.example.com", "test-api-key")
        sla_monitor = SLAMonitor(client)
        print("‚úì SLAMonitor —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        tests.append(("SLAMonitor instantiation", True))
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SLAMonitor: {e}")
        tests.append(("SLAMonitor instantiation", False))
        traceback.print_exc()

    return tests

def test_methods_exist():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ—Ç–æ–¥–æ–≤")
    print("=" * 60)

    tests = []

    try:
        from naumen_sdk import NaumenClient
        client = NaumenClient("https://test.example.com", "test-api-key")

        required_methods = [
            'create_service_call',
            'get_service_call',
            'update_service_call',
            'close_service_call',
            'search_service_calls',
            'add_comment',
            'get_comments'
        ]

        for method in required_methods:
            if hasattr(client, method):
                print(f"‚úì –ú–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω")
                tests.append((f"Method {method}", True))
            else:
                print(f"‚úó –ú–µ—Ç–æ–¥ {method} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                tests.append((f"Method {method}", False))

    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç–æ–¥–æ–≤: {e}")
        tests.append(("Methods check", False))
        traceback.print_exc()

    return tests

def test_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("=" * 60)

    tests = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ requests
    try:
        import requests
        print(f"‚úì requests {requests.__version__} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        tests.append(("requests library", True))
    except ImportError:
        print("‚úó requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        tests.append(("requests library", False))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ urllib3
    try:
        import urllib3
        print(f"‚úì urllib3 {urllib3.__version__} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        tests.append(("urllib3 library", True))
    except ImportError:
        print("‚úó urllib3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        tests.append(("urllib3 library", False))

    return tests

def print_summary(all_tests):
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)

    total = len(all_tests)
    passed = sum(1 for _, result in all_tests if result)
    failed = total - passed

    print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"–£—Å–ø–µ—à–Ω–æ: {passed} ‚úì")
    print(f"–ù–µ—É–¥–∞—á–Ω–æ: {failed} ‚úó")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total*100):.1f}%")

    if failed > 0:
        print("\n–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        for name, result in all_tests:
            if not result:
                print(f"  ‚úó {name}")

    print("\n" + "=" * 60)

    return failed == 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –ö–û–î–ê")
    print("Naumen Service Desk Automation")
    print("=" * 60 + "\n")

    all_tests = []

    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    all_tests.extend(test_imports())
    all_tests.extend(test_class_instantiation())
    all_tests.extend(test_methods_exist())
    all_tests.extend(test_dependencies())

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    success = print_summary(all_tests)

    if success:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n")
        return 0
    else:
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏!")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.\n")
        return 1

if __name__ == "__main__":
    sys.exit(main())
