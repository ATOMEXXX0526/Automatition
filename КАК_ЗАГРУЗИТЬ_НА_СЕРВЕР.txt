═══════════════════════════════════════════════════════════
  КАК ЗАГРУЗИТЬ AI ASSISTANT НА СЕРВЕР
═══════════════════════════════════════════════════════════

📋 ВАРИАНТ 1: АВТОМАТИЧЕСКОЕ РАЗВЕРТЫВАНИЕ (САМЫЙ ПРОСТОЙ)
═══════════════════════════════════════════════════════════

1. На вашем компьютере выполните:

   ./QUICK_DEPLOY.sh user@your-server.com

   Замените:
   - user - ваш пользователь на сервере
   - your-server.com - адрес сервера (IP или домен)

   Пример:
   ./QUICK_DEPLOY.sh root@192.168.1.100

2. Скрипт автоматически:
   ✓ Создаст архив
   ✓ Загрузит на сервер
   ✓ Распакует
   ✓ Установит зависимости
   ✓ Обучит модель

3. Подключитесь к серверу:

   ssh user@your-server.com

4. Перейдите в директорию:

   cd /opt/ai-assistant

5. Отредактируйте настройки:

   nano config.py

   Укажите:
   - NAUMEN_URL = "https://your-naumen.com"
   - NAUMEN_API_KEY = "your-key"

6. Запустите:

   export PYTHONPATH=/opt/ai-assistant
   python3 run_ai_assistant.py

   Готово! Сервер запущен на http://localhost:5000


═══════════════════════════════════════════════════════════
📋 ВАРИАНТ 2: ЧЕРЕЗ GIT (РЕКОМЕНДУЕТСЯ ДЛЯ ПРОДАКШЕНА)
═══════════════════════════════════════════════════════════

1. Подключитесь к серверу:

   ssh user@your-server.com

2. Клонируйте репозиторий:

   git clone https://github.com/ATOMEXXX0526/Automatition.git
   cd Automatition
   git checkout claude/investigate-issue-011CUKxLuSNSKX9d4dXXPWJJ

3. Установите зависимости:

   pip3 install -r ai_assistant/requirements.txt

4. Обучите модель:

   python3 ai_assistant/scripts/train_model.py

5. Настройте config.py:

   cp config.py.example config.py
   nano config.py

6. Запустите:

   export PYTHONPATH=$(pwd)
   python3 run_ai_assistant.py


═══════════════════════════════════════════════════════════
📋 ВАРИАНТ 3: РУЧНАЯ ЗАГРУЗКА (БЕЗ GIT)
═══════════════════════════════════════════════════════════

1. На вашем компьютере создайте архив:

   cd /home/user/Automatition
   tar -czf ai-assistant.tar.gz ai_assistant/ naumen_sdk/ automation/ *.py *.md requirements.txt config.py.example

2. Загрузите на сервер:

   scp ai-assistant.tar.gz user@your-server.com:/tmp/

3. На сервере распакуйте:

   ssh user@your-server.com
   cd /opt
   sudo mkdir ai-assistant
   sudo chown $USER ai-assistant
   cd ai-assistant
   tar -xzf /tmp/ai-assistant.tar.gz

4. Дальше выполните шаги 3-6 из Варианта 2


═══════════════════════════════════════════════════════════
🔧 НАСТРОЙКА SYSTEMD (ДЛЯ АВТОЗАПУСКА)
═══════════════════════════════════════════════════════════

1. Создайте файл сервиса:

   sudo nano /etc/systemd/system/ai-assistant.service

2. Вставьте:

   [Unit]
   Description=AI Assistant for Naumen
   After=network.target

   [Service]
   Type=simple
   User=your-user
   WorkingDirectory=/opt/ai-assistant
   Environment="PYTHONPATH=/opt/ai-assistant"
   Environment="DRY_RUN_MODE=true"
   ExecStart=/usr/bin/python3 /opt/ai-assistant/run_ai_assistant.py
   Restart=always

   [Install]
   WantedBy=multi-user.target

3. Запустите:

   sudo systemctl daemon-reload
   sudo systemctl enable ai-assistant
   sudo systemctl start ai-assistant

4. Проверка:

   sudo systemctl status ai-assistant
   sudo journalctl -u ai-assistant -f


═══════════════════════════════════════════════════════════
🧪 ПРОВЕРКА РАБОТЫ
═══════════════════════════════════════════════════════════

1. Health check:

   curl http://localhost:5000/health

2. Тест классификации:

   curl -X POST http://localhost:5000/ai/classify \
     -H "Content-Type: application/json" \
     -d '{"ticket_id":"TEST-001","subject":"Не работает принтер","description":"HP не печатает"}'

3. Метрики:

   curl http://localhost:5000/metrics


═══════════════════════════════════════════════════════════
⚠️  ВАЖНО!
═══════════════════════════════════════════════════════════

✓ Сначала запускайте в режиме DRY_RUN=true для тестирования
✓ Не забудьте настроить config.py с реальными данными Naumen
✓ Для production используйте systemd или supervisor
✓ Настройте nginx как reverse proxy для HTTPS
✓ Откройте порт в firewall: sudo ufw allow 5000/tcp


═══════════════════════════════════════════════════════════
📚 ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ
═══════════════════════════════════════════════════════════

Подробная инструкция: DEPLOYMENT.md
Проверка кода: python3 test_verification.py
Тест классификатора: python3 test_classifier_direct.py


═══════════════════════════════════════════════════════════
❓ ПРОБЛЕМЫ?
═══════════════════════════════════════════════════════════

ModuleNotFoundError:
  → export PYTHONPATH=/opt/ai-assistant

Порт занят:
  → sudo lsof -i :5000
  → sudo kill -9 <PID>

Модель не найдена:
  → python3 ai_assistant/scripts/train_model.py

Зависимости не установлены:
  → pip3 install --user -r requirements.txt


═══════════════════════════════════════════════════════════
