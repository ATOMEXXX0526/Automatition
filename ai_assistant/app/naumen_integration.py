"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Naumen Service Desk API
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ naumen_sdk
sys.path.insert(0, str(Path(__file__).resolve().parent.parent.parent))

from naumen_sdk import NaumenClient
from app.config import NAUMEN_URL, NAUMEN_API_KEY, NAUMEN_VERIFY_SSL, DRY_RUN_MODE
from app.utils.logger import logger
from typing import Dict, Optional


class NaumenIntegration:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Naumen Service Desk
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Naumen"""
        self.client = None
        if NAUMEN_API_KEY and NAUMEN_URL:
            try:
                self.client = NaumenClient(
                    base_url=NAUMEN_URL,
                    access_key=NAUMEN_API_KEY,
                    verify_ssl=NAUMEN_VERIFY_SSL
                )
                logger.info(f"Naumen client initialized: {NAUMEN_URL}")
            except Exception as e:
                logger.error(f"Failed to initialize Naumen client: {e}")
                self.client = None
        else:
            logger.warning("Naumen credentials not provided. Running in standalone mode.")

    def update_ticket(self, ticket_id: str, classification: Dict) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ Naumen —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏

        Args:
            ticket_id: ID –∑–∞—è–≤–∫–∏
            classification: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if DRY_RUN_MODE:
            logger.info(
                f"DRY RUN: Would update ticket {ticket_id} with classification: {classification}"
            )
            return True

        if not self.client:
            logger.error("Naumen client not initialized")
            return False

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
            update_data = {
                "category": classification.get("category"),
                "priority": classification.get("priority"),
                # support_group –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å UUID, –∞ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ UUID
            }

            self.client.update_service_call(ticket_id, **update_data)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            comment_text = (
                f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {classification.get('category')}\n"
                f"–ì—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {classification.get('support_group')}\n"
                f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {classification.get('priority')}\n"
                f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {classification.get('confidence'):.2%}\n"
                f"–ú–µ—Ç–æ–¥: {classification.get('method', 'unknown')}"
            )

            self.client.add_comment(
                ticket_id,
                comment_text,
                is_private=True  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            )

            logger.info(f"Successfully updated ticket {ticket_id}")
            return True

        except Exception as e:
            logger.error(f"Failed to update ticket {ticket_id}: {e}")
            return False

    def add_suggestion_comment(self, ticket_id: str, classification: Dict) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π (–Ω–µ –ø—Ä–∏–º–µ–Ω—è—è –∏–∑–º–µ–Ω–µ–Ω–∏—è)

        Args:
            ticket_id: ID –∑–∞—è–≤–∫–∏
            classification: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if DRY_RUN_MODE:
            logger.info(
                f"DRY RUN: Would add suggestion to ticket {ticket_id}: {classification}"
            )
            return True

        if not self.client:
            logger.error("Naumen client not initialized")
            return False

        try:
            comment_text = (
                f"ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è AI Assistant:\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {classification.get('category')}\n"
                f"–ì—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {classification.get('support_group')}\n"
                f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {classification.get('priority')}\n"
                f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {classification.get('confidence'):.2%}\n\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é."
            )

            self.client.add_comment(
                ticket_id,
                comment_text,
                is_private=True
            )

            logger.info(f"Added suggestion comment to ticket {ticket_id}")
            return True

        except Exception as e:
            logger.error(f"Failed to add suggestion to ticket {ticket_id}: {e}")
            return False

    def get_ticket_info(self, ticket_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ

        Args:
            ticket_id: ID –∑–∞—è–≤–∫–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ –∏–ª–∏ None
        """
        if not self.client:
            logger.error("Naumen client not initialized")
            return None

        try:
            ticket = self.client.get_service_call(ticket_id)
            logger.info(f"Retrieved ticket info for {ticket_id}")
            return ticket
        except Exception as e:
            logger.error(f"Failed to get ticket {ticket_id}: {e}")
            return None


# Singleton instance
_integration_instance = None


def get_naumen_integration() -> NaumenIntegration:
    """
    –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Naumen (singleton)

    Returns:
        NaumenIntegration
    """
    global _integration_instance
    if _integration_instance is None:
        _integration_instance = NaumenIntegration()
    return _integration_instance
